services:

  nginx:
    container_name: middlenginx
    image: nginx:stable-alpine
    restart: on-failure
    labels:
      co.elastic.logs/module: nginx
    expose:
      - "80"
      - "443:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.middle.conf:/etc/nginx/conf.d/default.conf:rw
      - ./certs/certificate.pem:/etc/nginx/certificate.pem
      - ./certs/private.key:/etc/nginx/private.key
      - ./certs/passphrase.txt:/etc/nginx/passphrase.txt
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
      #keycloak:
      #  condition: service_healthy
      #forexfrontend:
      #  condition: service_healthy

  keycloak:
    container_name: keycloak
    restart: on-failure
    labels:
      co.elastic.logs/module: keycloak
    build:
      context: ./keycloak
      args:
        KEYCLOAK_VERSION: 23.0.3
    env_file:
      - ./keycloak.dev.env
    ports:
      - "8443:8443"
    expose:
      - "8443"
    volumes:
      - ./backup/keycloak/changelog.xml:/liquibase/changelog/changelog.xml
      - ./backup/keycloak/keycloak_data:/opt/jboss/keycloak/standalone/data
      - ./certs/jdg.digital.p12:/opt/jboss/keycloak/conf/jdg.digital.p12
      - ./certs/certificate.pem:/opt/jboss/keycloak/conf/certificate.pem
      - ./certs/private.key:/opt/jboss/keycloak/conf/private.key
    depends_on:
      - db
    #healthcheck:
    #  test: [ "CMD", "curl", "-kf", "https://keycloak:8443/realms/master" ]
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3

  db:
    image: postgres:14.1-alpine
    container_name: db
    restart: on-failure
    labels:
      co.elastic.logs/module: db
    env_file:
      - ./database.dev.env
    expose:
      - "6432" # Publishes 5433 to other containers but NOT to host machine
    ports:
      - '6432:6432'
    volumes:
      - db:/var/lib/postgresql/data
      #- ./init-multi-postgres-databases.sh:/docker-entrypoint-initdb.d/init-multi-postgres-databases.sh
    command: -p 6432

  apigateway:
    container_name: apigateway
    build: ./api-gateway
    restart: always
    labels:
      co.elastic.logs/module: api-gateway
    ports:
      - "9080:9080"
    volumes:
      - ./certs/certificate.pem:/opt/apigateway/conf/certificate.pem
      - ./certs/private.key:/opt/apigateway/conf/private.key
    depends_on:
      - keycloak

  javabackend:
    container_name: javabackend
    build: ./forex-backend-java
    restart: always
    labels:
      co.elastic.logs/module: javabackend
    ports:
      - "5080:5080"
    volumes:
      - ./certs/certificate.pem:/opt/javabackend/conf/certificate.pem
      - ./certs/private.key:/opt/javabackend/conf/private.key
    depends_on:
      - keycloak

  forexfrontend:
    container_name: forexfrontend
    build:
      context: ./forex-frontend
      dockerfile: ./Dockerfile
    labels:
      co.elastic.logs/module: forexfrontend
    volumes:
      - .:/usr/app/
      - /usr/app/node_modules
    depends_on:
      - keycloak
    #healthcheck:
    #  test: [ "CMD", "curl", "-kf", "https://forexfrontend" ]
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3

  backend:
    container_name: backend
    build: ./
    restart: always
    labels:
      co.elastic.logs/module: backend
    ports:
      - "6081:6081"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/backend:/var/lib/backend
    depends_on:
      - keycloak

  tvsignals:
    container_name: tvsignals
    build: ./tvsignals
    restart: always
    labels:
      co.elastic.logs/module: tvsignals
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/backend:/var/lib/tvsignals
    depends_on:
      - keycloak

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      #- certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      #- xpack.security.http.ssl.enabled=true
      #- xpack.security.http.ssl.key=certs/es01/es01.key
      #- xpack.security.http.ssl.certificate=certs/es01/es01.crt
      #- xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=false
      #- xpack.security.transport.ssl.key=certs/es01/es01.key
      #- xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      #- xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      #- xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    #mem_limit: ${ES_MEM_LIMIT}
    mem_limit: 6144m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          #"curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
          "curl -s http://localhost:9200"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    #labels:
    #  co.elastic.logs/module: kibana
    volumes:
      #- certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      #- ./certs/certificate.pem:/etc/kibana/certificate.pem
    expose:
      - ${KIBANA_PORT}
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      #- SERVER_PUBLICBASEURL=http://85.215.32.163:5601
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      #- ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      #- XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      #- XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      #- XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    restart: on-failure
    user: root
    volumes:
      #- certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - "./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    command:
      - --strict.perms=false

  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    restart: on-failure
    user: root
    volumes:
      #- certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - "./filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
      - "./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    command:
      - --strict.perms=false

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    #labels:
    #  co.elastic.logs/module: logstash
    user: root
    volumes:
      #- certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://es01:9200

volumes:
  #certs:
  #  driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local
  db:
    driver: local
