/*
 * API interface
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jdg.digital.forexbackend.domain;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jdg.digital.forexbackend.domain.model.StrategyEnum;
import jdg.digital.forexbackend.domain.model.SymbolEnum;
import jdg.digital.forexbackend.domain.model.TimeFrameEnum;
import jdg.digital.forexbackend.domain.model.TradeTypeEnum;


import java.io.Serializable;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * Trade
 */
@JsonPropertyOrder({
  Trade.JSON_PROPERTY_ID,
  Trade.JSON_PROPERTY_SYMBOL,
  Trade.JSON_PROPERTY_TIMEFRAME,
  Trade.JSON_PROPERTY_STRATEGY,
  Trade.JSON_PROPERTY_TYPE,
  Trade.JSON_PROPERTY_ENTRY,
  Trade.JSON_PROPERTY_EXIT,
  Trade.JSON_PROPERTY_PROFIT,
  Trade.JSON_PROPERTY_CLOSED,
  Trade.JSON_PROPERTY_ACTIVATED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-24T21:03:49.168096600+02:00[Europe/Berlin]")
public class Trade implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private SymbolEnum symbol;

  public static final String JSON_PROPERTY_TIMEFRAME = "timeframe";
  private TimeFrameEnum timeframe;

  public static final String JSON_PROPERTY_STRATEGY = "strategy";
  private StrategyEnum strategy;

  public static final String JSON_PROPERTY_TYPE = "type";
  private TradeTypeEnum type;

  public static final String JSON_PROPERTY_ENTRY = "entry";
  private Double entry = null;

  public static final String JSON_PROPERTY_EXIT = "exit";
  private Double exit = null;

  public static final String JSON_PROPERTY_PROFIT = "profit";
  private Double profit = null;

  public static final String JSON_PROPERTY_CLOSED = "closed";
  private OffsetDateTime closed;

  public static final String JSON_PROPERTY_ACTIVATED = "activated";
  private OffsetDateTime activated;

  public Trade() { 
  }

  public Trade id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public Trade symbol(SymbolEnum symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SymbolEnum getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(SymbolEnum symbol) {
    this.symbol = symbol;
  }


  public Trade timeframe(TimeFrameEnum timeframe) {
    this.timeframe = timeframe;
    return this;
  }

   /**
   * Get timeframe
   * @return timeframe
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMEFRAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TimeFrameEnum getTimeframe() {
    return timeframe;
  }


  @JsonProperty(JSON_PROPERTY_TIMEFRAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeframe(TimeFrameEnum timeframe) {
    this.timeframe = timeframe;
  }


  public Trade strategy(StrategyEnum strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * Get strategy
   * @return strategy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StrategyEnum getStrategy() {
    return strategy;
  }


  @JsonProperty(JSON_PROPERTY_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrategy(StrategyEnum strategy) {
    this.strategy = strategy;
  }


  public Trade type(TradeTypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TradeTypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TradeTypeEnum type) {
    this.type = type;
  }


  public Trade entry(Double entry) {
    this.entry = entry;
    return this;
  }

   /**
   * Get entry
   * @return entry
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getEntry() {
    return entry;
  }


  @JsonProperty(JSON_PROPERTY_ENTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntry(Double entry) {
    this.entry = entry;
  }


  public Trade exit(Double exit) {
    this.exit = exit;
    return this;
  }

   /**
   * Get exit
   * @return exit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getExit() {
    return exit;
  }


  @JsonProperty(JSON_PROPERTY_EXIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExit(Double exit) {
    this.exit = exit;
  }


  public Trade profit(Double profit) {
    this.profit = profit;
    return this;
  }

   /**
   * Get profit
   * @return profit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROFIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getProfit() {
    return profit;
  }


  @JsonProperty(JSON_PROPERTY_PROFIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProfit(Double profit) {
    this.profit = profit;
  }


  public Trade closed(OffsetDateTime closed) {
    this.closed = closed;
    return this;
  }

   /**
   * Get closed
   * @return closed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLOSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getClosed() {
    return closed;
  }


  @JsonProperty(JSON_PROPERTY_CLOSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClosed(OffsetDateTime closed) {
    this.closed = closed;
  }


  public Trade activated(OffsetDateTime activated) {
    this.activated = activated;
    return this;
  }

   /**
   * Get activated
   * @return activated
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getActivated() {
    return activated;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActivated(OffsetDateTime activated) {
    this.activated = activated;
  }


  /**
   * Return true if this Trade object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trade trade = (Trade) o;
    return Objects.equals(this.id, trade.id) &&
        Objects.equals(this.symbol, trade.symbol) &&
        Objects.equals(this.timeframe, trade.timeframe) &&
        Objects.equals(this.strategy, trade.strategy) &&
        Objects.equals(this.type, trade.type) &&
        Objects.equals(this.entry, trade.entry) &&
        Objects.equals(this.exit, trade.exit) &&
        Objects.equals(this.profit, trade.profit) &&
        Objects.equals(this.closed, trade.closed) &&
        Objects.equals(this.activated, trade.activated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, symbol, timeframe, strategy, type, entry, exit, profit, closed, activated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trade {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timeframe: ").append(toIndentedString(timeframe)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    entry: ").append(toIndentedString(entry)).append("\n");
    sb.append("    exit: ").append(toIndentedString(exit)).append("\n");
    sb.append("    profit: ").append(toIndentedString(profit)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    activated: ").append(toIndentedString(activated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `symbol` to the URL query string
    if (getSymbol() != null) {
      joiner.add(String.format("%ssymbol%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSymbol()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `timeframe` to the URL query string
    if (getTimeframe() != null) {
      joiner.add(String.format("%stimeframe%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimeframe()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `strategy` to the URL query string
    if (getStrategy() != null) {
      joiner.add(String.format("%sstrategy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStrategy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `entry` to the URL query string
    if (getEntry() != null) {
      joiner.add(String.format("%sentry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEntry()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `exit` to the URL query string
    if (getExit() != null) {
      joiner.add(String.format("%sexit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `profit` to the URL query string
    if (getProfit() != null) {
      joiner.add(String.format("%sprofit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProfit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `closed` to the URL query string
    if (getClosed() != null) {
      joiner.add(String.format("%sclosed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClosed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `activated` to the URL query string
    if (getActivated() != null) {
      joiner.add(String.format("%sactivated%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActivated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

