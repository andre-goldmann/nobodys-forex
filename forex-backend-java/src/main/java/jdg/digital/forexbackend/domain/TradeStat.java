/*
 * API interface
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jdg.digital.forexbackend.domain;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jdg.digital.forexbackend.domain.model.StrategyEnum;
import jdg.digital.forexbackend.domain.model.SymbolEnum;


import java.io.Serializable;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;


/**
 * Trade statistics
 */
@JsonPropertyOrder({
  TradeStat.JSON_PROPERTY_SYMBOL,
  TradeStat.JSON_PROPERTY_STRATEGY,
  TradeStat.JSON_PROPERTY_WINS,
  TradeStat.JSON_PROPERTY_LOSES,
  TradeStat.JSON_PROPERTY_TOTAL,
  TradeStat.JSON_PROPERTY_WINPERCENTAGE,
  TradeStat.JSON_PROPERTY_PROFIT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-24T21:03:49.168096600+02:00[Europe/Berlin]")
public class TradeStat implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private SymbolEnum symbol;

  public static final String JSON_PROPERTY_STRATEGY = "strategy";
  private StrategyEnum strategy;

  public static final String JSON_PROPERTY_WINS = "wins";
  private Integer wins;

  public static final String JSON_PROPERTY_LOSES = "loses";
  private Integer loses;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Integer total;

  public static final String JSON_PROPERTY_WINPERCENTAGE = "winpercentage";
  private Double winpercentage = null;

  public static final String JSON_PROPERTY_PROFIT = "profit";
  private Double profit = null;

  public TradeStat() { 
  }

  public TradeStat symbol(SymbolEnum symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SymbolEnum getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(SymbolEnum symbol) {
    this.symbol = symbol;
  }


  public TradeStat strategy(StrategyEnum strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * Get strategy
   * @return strategy
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StrategyEnum getStrategy() {
    return strategy;
  }


  @JsonProperty(JSON_PROPERTY_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStrategy(StrategyEnum strategy) {
    this.strategy = strategy;
  }


  public TradeStat wins(Integer wins) {
    this.wins = wins;
    return this;
  }

   /**
   * Get wins
   * @return wins
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WINS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getWins() {
    return wins;
  }


  @JsonProperty(JSON_PROPERTY_WINS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWins(Integer wins) {
    this.wins = wins;
  }


  public TradeStat loses(Integer loses) {
    this.loses = loses;
    return this;
  }

   /**
   * Get loses
   * @return loses
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOSES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLoses() {
    return loses;
  }


  @JsonProperty(JSON_PROPERTY_LOSES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLoses(Integer loses) {
    this.loses = loses;
  }


  public TradeStat total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(Integer total) {
    this.total = total;
  }


  public TradeStat winpercentage(Double winpercentage) {
    this.winpercentage = winpercentage;
    return this;
  }

   /**
   * Get winpercentage
   * @return winpercentage
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WINPERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getWinpercentage() {
    return winpercentage;
  }


  @JsonProperty(JSON_PROPERTY_WINPERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWinpercentage(Double winpercentage) {
    this.winpercentage = winpercentage;
  }


  public TradeStat profit(Double profit) {
    this.profit = profit;
    return this;
  }

   /**
   * Get profit
   * @return profit
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROFIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getProfit() {
    return profit;
  }


  @JsonProperty(JSON_PROPERTY_PROFIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProfit(Double profit) {
    this.profit = profit;
  }


  /**
   * Return true if this TradeStat object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradeStat tradeStat = (TradeStat) o;
    return Objects.equals(this.symbol, tradeStat.symbol) &&
        Objects.equals(this.strategy, tradeStat.strategy) &&
        Objects.equals(this.wins, tradeStat.wins) &&
        Objects.equals(this.loses, tradeStat.loses) &&
        Objects.equals(this.total, tradeStat.total) &&
        Objects.equals(this.winpercentage, tradeStat.winpercentage) &&
        Objects.equals(this.profit, tradeStat.profit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, strategy, wins, loses, total, winpercentage, profit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradeStat {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("    loses: ").append(toIndentedString(loses)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    winpercentage: ").append(toIndentedString(winpercentage)).append("\n");
    sb.append("    profit: ").append(toIndentedString(profit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `symbol` to the URL query string
    if (getSymbol() != null) {
      joiner.add(String.format("%ssymbol%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSymbol()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `strategy` to the URL query string
    if (getStrategy() != null) {
      joiner.add(String.format("%sstrategy%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStrategy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `wins` to the URL query string
    if (getWins() != null) {
      joiner.add(String.format("%swins%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWins()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `loses` to the URL query string
    if (getLoses() != null) {
      joiner.add(String.format("%sloses%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLoses()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `total` to the URL query string
    if (getTotal() != null) {
      joiner.add(String.format("%stotal%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `winpercentage` to the URL query string
    if (getWinpercentage() != null) {
      joiner.add(String.format("%swinpercentage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWinpercentage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `profit` to the URL query string
    if (getProfit() != null) {
      joiner.add(String.format("%sprofit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProfit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

